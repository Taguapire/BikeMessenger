// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BikeMessenger
{
    public partial class BK_SQliteContext : DbContext
    {
        public BK_SQliteContext()
        {
        }

        public BK_SQliteContext(DbContextOptions<BK_SQliteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CIUDAD> CIUDADs { get; set; }
        public virtual DbSet<CLIENTE> CLIENTEs { get; set; }
        public virtual DbSet<COMUNA> COMUNAs { get; set; }
        public virtual DbSet<EMPRESA> EMPRESAs { get; set; }
        public virtual DbSet<ESTADOREGION> ESTADOREGIONs { get; set; }
        public virtual DbSet<PAI> PAIs { get; set; }
        public virtual DbSet<PERSONAL> PERSONALs { get; set; }
        public virtual DbSet<RECURSO> RECURSOs { get; set; }
        public virtual DbSet<SERVICIO> SERVICIOs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlite("Data Source=C:\\Users\\dress\\AppData\\Local\\Packages\\\\21006SQLBiker.46887132F12D8_vbssm61nqwqkp\\LocalState\\\\BikeMessenger.db");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CLIENTE>(entity =>
            {
                entity.HasKey(e => new { e.PENTALPHA, e.RUTID, e.DIGVER });
            });

            modelBuilder.Entity<PERSONAL>(entity =>
            {
                entity.HasKey(e => new { e.PENTALPHA, e.RUTID, e.DIGVER });
            });

            modelBuilder.Entity<RECURSO>(entity =>
            {
                entity.HasKey(e => new { e.PENTALPHA, e.PATENTE });

                entity.HasOne(d => d.PERSONAL)
                    .WithMany(p => p.RECURSOs)
                    .HasForeignKey(d => new { d.PENTALPHA, d.RUTID, d.DIGVER })
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<SERVICIO>(entity =>
            {
                entity.HasKey(e => new { e.PENTALPHA, e.NROENVIO });

                entity.HasOne(d => d.PENTALPHANavigation)
                    .WithMany(p => p.SERVICIOs)
                    .HasForeignKey(d => d.PENTALPHA)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.CLIENTE)
                    .WithMany(p => p.SERVICIOs)
                    .HasForeignKey(d => new { d.PENTALPHA, d.CLIENTERUT, d.CLIENTEDIGVER })
                    .OnDelete(DeleteBehavior.Cascade);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}